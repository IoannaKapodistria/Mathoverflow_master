{"remainingRequest":"D:\\master_projects\\Mathoverflow_master\\Mathoverflow-v2\\mathoverflow-v2-client\\node_modules\\babel-loader\\lib\\index.js!D:\\master_projects\\Mathoverflow_master\\Mathoverflow-v2\\mathoverflow-v2-client\\node_modules\\ts-loader\\index.js??ref--14-2!D:\\master_projects\\Mathoverflow_master\\Mathoverflow-v2\\mathoverflow-v2-client\\src\\components\\functions.ts","dependencies":[{"path":"D:\\master_projects\\Mathoverflow_master\\Mathoverflow-v2\\mathoverflow-v2-client\\src\\components\\functions.ts","mtime":1668360560570},{"path":"D:\\master_projects\\Mathoverflow_master\\Mathoverflow-v2\\mathoverflow-v2-client\\babel.config.js","mtime":1665858878853},{"path":"D:\\master_projects\\Mathoverflow_master\\Mathoverflow-v2\\mathoverflow-v2-client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\master_projects\\Mathoverflow_master\\Mathoverflow-v2\\mathoverflow-v2-client\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"D:\\master_projects\\Mathoverflow_master\\Mathoverflow-v2\\mathoverflow-v2-client\\node_modules\\ts-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["D:\\master_projects\\Mathoverflow_master\\Mathoverflow-v2\\mathoverflow-v2-client\\src\\components\\functions.ts"],"names":[],"mappings":"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","sourcesContent":["import store from \"@/store\";\r\nimport ky from \"ky\";\r\nimport { responseTypes } from \"ky/distribution/core/constants\";\r\n\r\nexport async function postQuestion(data: any) {\r\n    console.log(data, \" these are data\");\r\n    let respone = await ky\r\n        .post(\"http://localhost:3000/ask\", {\r\n            mode: \"cors\",\r\n            body: JSON.stringify(data),\r\n            headers: {\r\n                \"content-type\": \"application/json\",\r\n            },\r\n            timeout: false,\r\n        })\r\n        .then((value: any) => {\r\n            console.log(\"this is the value:\", value);\r\n        });\r\n}\r\n\r\nexport async function getQuestions() {\r\n    try {\r\n        let response = await ky\r\n            .get(\"http://localhost:3000/questions\", {\r\n                mode: \"cors\",\r\n                headers: {\r\n                    \"content-type\": \"application/json\",\r\n                },\r\n                timeout: false,\r\n            })\r\n            .catch((err: any) => {\r\n                console.log(\"mathoverflow: error while attempting to get a list of questions\", err);\r\n            });\r\n        if (response !== undefined) {\r\n            const questions = await response.json();\r\n            console.log(questions, \"these are questions\");\r\n            store.commit(\"setQuestions\", questions);\r\n        }\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport async function getQuestion(id: any) {\r\n    try {\r\n        let response = await ky\r\n            .get(`http://localhost:3000/questions/${id}`, {\r\n                mode: \"cors\",\r\n                headers: {\r\n                    \"content-type\": \"application/json\",\r\n                },\r\n                timeout: false,\r\n            })\r\n            .catch((err: any) => {\r\n                console.log(\"mathoverflow: error while attempting to get a question\", err);\r\n            });\r\n        if (response !== undefined) {\r\n            const value = await response.json();\r\n            console.log(value, \"this is the question by id 1\");\r\n            // store.commit(\"setQuestions\", questions);\r\n            return value;\r\n        }\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport async function getAnswer(id: any) {\r\n    try {\r\n        let response = await ky\r\n            .get(`http://localhost:3000/answers/${id}`, {\r\n                mode: \"cors\",\r\n                headers: {\r\n                    \"content-type\": \"application/json\",\r\n                },\r\n                timeout: false,\r\n            })\r\n            .catch((err: any) => {\r\n                console.log(\"mathoverflow: error while attempting to get an answer\", err);\r\n            });\r\n        if (response !== undefined) {\r\n            const value = await response.json();\r\n            console.log(value, \"this is the answer by id 1\");\r\n            // store.commit(\"setQuestions\", questions);\r\n            return value;\r\n        }\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport async function postAnswer(data: any) {\r\n    console.log(data, \" these are data\");\r\n    let respone = await ky\r\n        .post(\"http://localhost:3000/answer\", {\r\n            mode: \"cors\",\r\n            body: JSON.stringify(data),\r\n            headers: {\r\n                \"content-type\": \"application/json\",\r\n            },\r\n            timeout: false,\r\n        })\r\n        .then((value: any) => {\r\n            console.log(\"this is the value:\", value);\r\n        });\r\n}\r\n\r\nexport async function getUsers() {\r\n    try {\r\n        let response = await ky\r\n            .get(\"http://localhost:3000/users\", {\r\n                mode: \"cors\",\r\n                headers: {\r\n                    \"content-type\": \"application/json\",\r\n                },\r\n                timeout: false,\r\n            })\r\n            .catch((err: any) => {\r\n                console.log(\"mathoverflow: error while attempting to get users\", err);\r\n            });\r\n        if (response !== undefined) {\r\n            const value = await response.json();\r\n            console.log(value, \"this is the users\");\r\n            store.commit(\"setUsers\", value);\r\n            return value;\r\n        }\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport async function getUser(id: any) {\r\n    try {\r\n        let response = await ky\r\n            .get(`http://localhost:3000/users/${id}`, {\r\n                mode: \"cors\",\r\n                headers: {\r\n                    \"content-type\": \"application/json\",\r\n                },\r\n                timeout: false,\r\n            })\r\n            .catch((err: any) => {\r\n                console.log(\"mathoverflow: error while attempting to get a user\", err);\r\n            });\r\n        if (response !== undefined) {\r\n            const value = await response.json();\r\n            console.log(value, \"this is the user by id 1\");\r\n            // store.commit(\"setQuestions\", questions);\r\n            return value;\r\n        }\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport async function isLogged() {\r\n    try {\r\n        let response = await ky\r\n            .get(\"http://localhost:3000/islogged\", {\r\n                mode: \"cors\",\r\n                headers: {\r\n                    \"content-type\": \"application/json\",\r\n                },\r\n                timeout: false,\r\n            })\r\n            .catch((err: any) => {\r\n                console.log(\"mathoverflow: error while attempting to get isLogged\", err);\r\n            });\r\n        if (response !== undefined) {\r\n            const value = await response.json();\r\n            console.log(value, \"this is the ISLOGGED\");\r\n            // store.commit(\"setUsers\", value);\r\n            return value;\r\n        }\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport async function signUp(data: any) {\r\n    let response = await ky\r\n        .post(\"http://localhost:3000/signup\", {\r\n            mode: \"cors\",\r\n            body: JSON.stringify(data),\r\n            headers: {\r\n                \"content-type\": \"application/json\",\r\n            },\r\n            timeout: false,\r\n        })\r\n        .then((value: any) => {\r\n            console.log(\"this is the value:\", value);\r\n            return value;\r\n        });\r\n    return response;\r\n}\r\n\r\nexport async function signIn(data: any) {\r\n    let response = await ky\r\n        .post(\"http://localhost:3000/signin\", {\r\n            mode: \"cors\",\r\n            body: JSON.stringify(data),\r\n            headers: {\r\n                \"content-type\": \"application/json\",\r\n            },\r\n            timeout: false,\r\n        })\r\n        .then(async (value: any) => {\r\n            console.log(\"this is the login value:\", value);\r\n            console.log(\"this is the login response:\", response);\r\n            return value;\r\n            // isLogged();\r\n            //\r\n            // let response = await ky\r\n            //     .post(\"http://localhost:3000/sessionCheck\", {\r\n            //         mode: \"cors\",\r\n            //         body: JSON.stringify(value),\r\n            //         headers: {\r\n            //             \"content-type\": \"application/json\",\r\n            //         },\r\n            //         timeout: false,\r\n            //     })\r\n            //     .catch((err: any) => {\r\n            //         console.log(\"mathoverflow: error while attempting to get sessionCheck\", err);\r\n            //     });\r\n        });\r\n    return response;\r\n}\r\n\r\n//upvote question\r\nexport async function voteQuestion(data: any) {\r\n    let response = await ky\r\n        .post(\"http://localhost:3000/vote\", {\r\n            mode: \"cors\",\r\n            body: JSON.stringify(data),\r\n            headers: {\r\n                \"content-type\": \"application/json\",\r\n            },\r\n            timeout: false,\r\n        })\r\n        .then((value: any) => {\r\n            console.log(\"this is the value:\", value);\r\n        });\r\n}\r\n\r\n//downvote question\r\n//delete question\r\nexport async function deleteQuestion(id: any) {\r\n    let response = await ky\r\n        .delete(`http://localhost:3000/delete_question/${id}`, {\r\n            mode: \"cors\",\r\n            // body: JSON.stringify(data),\r\n            headers: {\r\n                \"content-type\": \"application/json\",\r\n            },\r\n            timeout: false,\r\n        })\r\n        .then((value: any) => {\r\n            console.log(\"this is the value:\", value);\r\n        });\r\n}\r\n\r\nexport async function deleteAnswer(id: any) {\r\n    let response = await ky\r\n        .delete(`http://localhost:3000/delete_answer/${id}`, {\r\n            mode: \"cors\",\r\n            // body: JSON.stringify(data),\r\n            headers: {\r\n                \"content-type\": \"application/json\",\r\n            },\r\n            timeout: false,\r\n        })\r\n        .then((value: any) => {\r\n            console.log(\"this is the value:\", value);\r\n        });\r\n}\r\n\r\nexport async function removeUser(id: any) {\r\n    let response = await ky\r\n        .delete(`http://localhost:3000/delete_user/${id}`, {\r\n            mode: \"cors\",\r\n            // body: JSON.stringify(data),\r\n            headers: {\r\n                \"content-type\": \"application/json\",\r\n            },\r\n            timeout: false,\r\n        })\r\n        .then((value: any) => {\r\n            console.log(\"this is the value:\", value);\r\n        });\r\n}\r\n\r\n//upvote question\r\nexport async function voteAnswer(data: any) {\r\n    let response = await ky\r\n        .post(\"http://localhost:3000/answer_vote\", {\r\n            mode: \"cors\",\r\n            body: JSON.stringify(data),\r\n            headers: {\r\n                \"content-type\": \"application/json\",\r\n            },\r\n            timeout: false,\r\n        })\r\n        .then((value: any) => {\r\n            console.log(\"this is the value:\", value);\r\n        });\r\n}\r\n\r\nexport async function updateQuestion1(id: number, value: any) {\r\n    let response = await ky\r\n        .put(`http://localhost:3000/update_question/${id}`, {\r\n            mode: \"cors\",\r\n            body: JSON.stringify(value),\r\n            headers: {\r\n                \"content-type\": \"application/json\",\r\n            },\r\n            timeout: false,\r\n        })\r\n        .then((value: any) => {\r\n            console.log(\"this is the value:\", value);\r\n        });\r\n}\r\n\r\nexport async function updateAnswer1(id: number, value: any) {\r\n    let response = await ky\r\n        .put(`http://localhost:3000/update_answer/${id}`, {\r\n            mode: \"cors\",\r\n            body: JSON.stringify(value),\r\n            headers: {\r\n                \"content-type\": \"application/json\",\r\n            },\r\n            timeout: false,\r\n        })\r\n        .then((value: any) => {\r\n            console.log(\"this is the value:\", value);\r\n        });\r\n}\r\n"],"sourceRoot":""}]}