{"remainingRequest":"D:\\master_projects\\Mathoverflow_master\\Mathoverflow-v2\\mathoverflow-v2-client\\node_modules\\babel-loader\\lib\\index.js!D:\\master_projects\\Mathoverflow_master\\Mathoverflow-v2\\mathoverflow-v2-client\\node_modules\\ts-loader\\index.js??ref--14-2!D:\\master_projects\\Mathoverflow_master\\Mathoverflow-v2\\mathoverflow-v2-client\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!D:\\master_projects\\Mathoverflow_master\\Mathoverflow-v2\\mathoverflow-v2-client\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\master_projects\\Mathoverflow_master\\Mathoverflow-v2\\mathoverflow-v2-client\\src\\components\\questions.vue?vue&type=script&lang=ts&","dependencies":[{"path":"D:\\master_projects\\Mathoverflow_master\\Mathoverflow-v2\\mathoverflow-v2-client\\src\\components\\questions.vue","mtime":1668366909766},{"path":"D:\\master_projects\\Mathoverflow_master\\Mathoverflow-v2\\mathoverflow-v2-client\\babel.config.js","mtime":1665858878853},{"path":"D:\\master_projects\\Mathoverflow_master\\Mathoverflow-v2\\mathoverflow-v2-client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\master_projects\\Mathoverflow_master\\Mathoverflow-v2\\mathoverflow-v2-client\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"D:\\master_projects\\Mathoverflow_master\\Mathoverflow-v2\\mathoverflow-v2-client\\node_modules\\ts-loader\\index.js","mtime":499162500000},{"path":"D:\\master_projects\\Mathoverflow_master\\Mathoverflow-v2\\mathoverflow-v2-client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\master_projects\\Mathoverflow_master\\Mathoverflow-v2\\mathoverflow-v2-client\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyIGZyb20gIkQ6XFxtYXN0ZXJfcHJvamVjdHNcXE1hdGhvdmVyZmxvd19tYXN0ZXJcXE1hdGhvdmVyZmxvdy12MlxcbWF0aG92ZXJmbG93LXYyLWNsaWVudFxcbm9kZV9tb2R1bGVzXFxAYmFiZWxcXHJ1bnRpbWVcXGhlbHBlcnNcXGVzbVxcY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlci5qcyI7CmltcG9ydCBfYXN5bmNUb0dlbmVyYXRvciBmcm9tICJEOlxcbWFzdGVyX3Byb2plY3RzXFxNYXRob3ZlcmZsb3dfbWFzdGVyXFxNYXRob3ZlcmZsb3ctdjJcXG1hdGhvdmVyZmxvdy12Mi1jbGllbnRcXG5vZGVfbW9kdWxlc1xcQGJhYmVsXFxydW50aW1lXFxoZWxwZXJzXFxlc21cXGFzeW5jVG9HZW5lcmF0b3IuanMiOwppbXBvcnQgX29iamVjdFNwcmVhZCBmcm9tICJEOlxcbWFzdGVyX3Byb2plY3RzXFxNYXRob3ZlcmZsb3dfbWFzdGVyXFxNYXRob3ZlcmZsb3ctdjJcXG1hdGhvdmVyZmxvdy12Mi1jbGllbnRcXG5vZGVfbW9kdWxlc1xcQGJhYmVsXFxydW50aW1lXFxoZWxwZXJzXFxlc21cXG9iamVjdFNwcmVhZDIuanMiOwppbXBvcnQgInJlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZS5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZpbHRlci5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmcuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5yZWR1Y2UuanMiOwppbXBvcnQga3kgZnJvbSAna3knOwppbXBvcnQgVnVlIGZyb20gJ3Z1ZSc7CmltcG9ydCB7IG1hcEdldHRlcnMgfSBmcm9tICd2dWV4JzsKaW1wb3J0IHsgZGVsZXRlQW5zd2VyLCBkZWxldGVRdWVzdGlvbiwgZ2V0UXVlc3Rpb24sIGdldFF1ZXN0aW9ucywgZ2V0VXNlcnMgfSBmcm9tICcuL2Z1bmN0aW9ucyc7CmV4cG9ydCBkZWZhdWx0IFZ1ZS5leHRlbmQoewogIGRhdGE6IGZ1bmN0aW9uIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICBhZG1pbjogdHJ1ZSwKICAgICAgc2VhcmNoOiAiIiwKICAgICAgcXVlc3Rpb25zQ29sczogW3sKICAgICAgICB0ZXh0OiAiQW5zd2VycyIsCiAgICAgICAgYWxpZ246ICdzdGFydCcsCiAgICAgICAgc29ydGFibGU6IHRydWUsCiAgICAgICAgdmFsdWU6ICdhbnN3ZXJzJwogICAgICB9LCB7CiAgICAgICAgdGV4dDogIlZvdGVzIiwKICAgICAgICBhbGlnbjogJ3N0YXJ0JywKICAgICAgICBzb3J0YWJsZTogdHJ1ZSwKICAgICAgICB2YWx1ZTogJ3ZvdGVzJwogICAgICB9LCB7CiAgICAgICAgdGV4dDogIlF1ZXN0aW9uIiwKICAgICAgICBhbGlnbjogJ3N0YXJ0JywKICAgICAgICBzb3J0YWJsZTogdHJ1ZSwKICAgICAgICB2YWx1ZTogJ3RpdGxlJwogICAgICB9LCB7CiAgICAgICAgdGV4dDogJ1VzZXInLAogICAgICAgIGFsaWduOiAnc3RhcnQnLAogICAgICAgIHNvcnRhYmxlOiB0cnVlLAogICAgICAgIHZhbHVlOiAndXNlcicKICAgICAgfSwgewogICAgICAgIHRleHQ6ICJpZCIsCiAgICAgICAgYWxpZ246ICdkLW5vbmUnLAogICAgICAgIHNvcnRhYmxlOiBmYWxzZSwKICAgICAgICB2YWx1ZTogJ3F1ZXN0aW9uX2lkJwogICAgICB9LCB7CiAgICAgICAgdGV4dDogIiIsCiAgICAgICAgYWxpZ246ICdjZW50ZXInLAogICAgICAgIHNvcnRhYmxlOiBmYWxzZSwKICAgICAgICB2YWx1ZTogJ3JlbW92ZScKICAgICAgfV0sCiAgICAgIHF1ZXN0aW9uczogWy8vIHsgYW5zd2VyczogIjEzIiwgdm90ZXM6ICI1MCIsIHF1ZXN0aW9uOiAiV2hhdCdzIGFuIGludHVpdGl2ZSB3YXkgdG8gdGhpbmsgYWJvdXQgdGhlIGRldGVybWluYW50PyIsIHVzZXI6ICJJb2FubmE5NiIgfSwKICAgICAgICAvLyB7IGFuc3dlcnM6ICI1Iiwgdm90ZXM6ICIyOCIsIHF1ZXN0aW9uOiAiV2h5IGlzIGEgcmluZyB0aGF0IGhhcyBvbmx5IG9uZSBwcmltZSBoZWxwZnVsPyIsIHVzZXI6ICJUb2xpczkwIiB9LFwKICAgICAgXSwKICAgICAgZnVDb250ZW50OiBmYWxzZQogICAgfTsKICB9LAogIGNvbXB1dGVkOiBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIG1hcEdldHRlcnMoWyJnZXRRdWVzdGlvbnMiLCAiZ2V0VXNlcnMiLCAiZ2V0UXVlc3Rpb25EYXRhIl0pKSwge30sIHsKICAgIC8vIGFzeW5jIHF1ZXN0aW9uc0l0ZW1zKCkgewogICAgLy8gICAgIGxldCBxdWVzdGlvbnMgPSBbXSBhcyBhbnlbXTsKICAgIC8vICAgICAvLyBjb25zb2xlLmxvZyh2YWx1ZSwgInZhbHVlIG9mIGdldCBxdWVzdGlvbnMiKTsKICAgIC8vICAgICBmb3IgKGNvbnN0IHF1ZXN0aW9uIG9mIHRoaXMuZ2V0UXVlc3Rpb25zKSB7CiAgICAvLyAgICAgICAgIGNvbnN0IHF1ZXN0aW9uRGF0YSA9IGF3YWl0IGdldFF1ZXN0aW9uKHF1ZXN0aW9uLnF1ZXN0aW9uX2lkKTsKICAgIC8vICAgICAgICAgY29uc3QgYW5zd2VycyA9IHF1ZXN0aW9uRGF0YS5hbnN3ZXJzOwogICAgLy8gICAgICAgICBjb25zdCBhbnN3ZXJzTnVtYmVyID0gYW5zd2Vycy5sZW5ndGg7CiAgICAvLyAgICAgICAgIGNvbnN0IHF1ZXN0aW9uT2JqZWN0ID0geyBhbnN3ZXJzOiBhbnN3ZXJzTnVtYmVyLCB2b3RlczogIjEwIiwgdGl0bGU6IHF1ZXN0aW9uLnRpdGxlLCB1c2VyOiAiSW9hbm5hIiwgcXVlc3Rpb25faWQ6cXVlc3Rpb24ucXVlc3Rpb25faWQgfTsKICAgIC8vICAgICAgICAgcXVlc3Rpb25zLnB1c2gocXVlc3Rpb25PYmplY3QpOwogICAgLy8gICAgICAgICBjb25zb2xlLmxvZyhxdWVzdGlvbnMsICJ0aGVzZSBhcmUgcXVlc3Rpb25zIikKICAgIC8vICAgICB9CiAgICAvLyAgICAgcmV0dXJuIHF1ZXN0aW9uczsKICAgIC8vIH0sCiAgICBjb21wdXRlZEhlYWRlcnM6IGZ1bmN0aW9uIGNvbXB1dGVkSGVhZGVycygpIHsKICAgICAgcmV0dXJuIHRoaXMucXVlc3Rpb25zQ29scy5maWx0ZXIoZnVuY3Rpb24gKHdvcmQpIHsKICAgICAgICByZXR1cm4gd29yZC52YWx1ZSAhPT0gInF1ZXN0aW9uX2lkIjsKICAgICAgfSk7CiAgICB9CiAgfSksCiAgd2F0Y2g6IHsKICAgIGdldFF1ZXN0aW9uczogZnVuY3Rpb24gZ2V0UXVlc3Rpb25zKHZhbHVlKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlKCkgewogICAgICAgIHZhciBxdWVzdGlvbnNBcnJheSwgYW5zd2VycywgdXNlcnMsIF9pdGVyYXRvciwgX3N0ZXAsIHF1ZXN0aW9uLCBxdWVzdGlvbkRhdGEsIF9pdGVyYXRvcjIsIF9zdGVwMiwgYW5zd2VyLCB2b3Rlcywgdm90ZXNBcnJheSwgX2l0ZXJhdG9yMywgX3N0ZXAzLCB2b3RlLCBfdmFsdWUsIHZvdGVzU3VtLCBhbnN3ZXJzTnVtYmVyLCBfaXRlcmF0b3I0LCBfc3RlcDQsIHVzZXIsIHF1ZXN0aW9uT2JqZWN0OwoKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBxdWVzdGlvbnNBcnJheSA9IFtdOwogICAgICAgICAgICAgICAgYW5zd2VycyA9IFtdOwogICAgICAgICAgICAgICAgY29uc29sZS5sb2codmFsdWUsICJ2YWx1ZSBvZiBnZXQgcXVlc3Rpb25zIik7CiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNTsKICAgICAgICAgICAgICAgIHJldHVybiBnZXRVc2VycygpOwoKICAgICAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgICAgICB1c2VycyA9IF9jb250ZXh0LnNlbnQ7CiAgICAgICAgICAgICAgICBfaXRlcmF0b3IgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcih2YWx1ZSk7CiAgICAgICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gNzsKCiAgICAgICAgICAgICAgICBfaXRlcmF0b3IucygpOwoKICAgICAgICAgICAgICBjYXNlIDk6CiAgICAgICAgICAgICAgICBpZiAoKF9zdGVwID0gX2l0ZXJhdG9yLm4oKSkuZG9uZSkgewogICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMjg7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHF1ZXN0aW9uID0gX3N0ZXAudmFsdWU7CiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTM7CiAgICAgICAgICAgICAgICByZXR1cm4gZ2V0UXVlc3Rpb24ocXVlc3Rpb24ucXVlc3Rpb25faWQpOwoKICAgICAgICAgICAgICBjYXNlIDEzOgogICAgICAgICAgICAgICAgcXVlc3Rpb25EYXRhID0gX2NvbnRleHQuc2VudDsKICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHF1ZXN0aW9uRGF0YSwgIlRIRSBRVUVTVElPTiBEQVRBIik7CiAgICAgICAgICAgICAgICBfaXRlcmF0b3IyID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIocXVlc3Rpb25EYXRhLmFuc3dlcnMpOwoKICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgIGZvciAoX2l0ZXJhdG9yMi5zKCk7ICEoX3N0ZXAyID0gX2l0ZXJhdG9yMi5uKCkpLmRvbmU7KSB7CiAgICAgICAgICAgICAgICAgICAgYW5zd2VyID0gX3N0ZXAyLnZhbHVlOwoKICAgICAgICAgICAgICAgICAgICBpZiAoYW5zd2VyLlVzZXJVc2VySWQgIT09IG51bGwpIHsKICAgICAgICAgICAgICAgICAgICAgIGFuc3dlcnMucHVzaChhbnN3ZXIpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7CiAgICAgICAgICAgICAgICAgIF9pdGVyYXRvcjIuZShlcnIpOwogICAgICAgICAgICAgICAgfSBmaW5hbGx5IHsKICAgICAgICAgICAgICAgICAgX2l0ZXJhdG9yMi5mKCk7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgY29uc29sZS5sb2coYW5zd2VycywgInRoZSBhbnN3ZXJzMjIyIik7IC8vIGNvbnN0IGFuc3dlcnMgPSBxdWVzdGlvbkRhdGEuYW5zd2VyczsKCiAgICAgICAgICAgICAgICB2b3RlcyA9IHF1ZXN0aW9uRGF0YS52b3RlczsKICAgICAgICAgICAgICAgIHZvdGVzQXJyYXkgPSBbXTsgLy9jYWxjdWxhdGUgdm90ZXMKCiAgICAgICAgICAgICAgICBfaXRlcmF0b3IzID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIodm90ZXMpOwoKICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgIGZvciAoX2l0ZXJhdG9yMy5zKCk7ICEoX3N0ZXAzID0gX2l0ZXJhdG9yMy5uKCkpLmRvbmU7KSB7CiAgICAgICAgICAgICAgICAgICAgdm90ZSA9IF9zdGVwMy52YWx1ZTsKICAgICAgICAgICAgICAgICAgICBfdmFsdWUgPSB2b3RlLnZhbHVlOwogICAgICAgICAgICAgICAgICAgIHZvdGVzQXJyYXkucHVzaChfdmFsdWUpOwogICAgICAgICAgICAgICAgICB9IC8vZ2V0IHRoZSBzdW0KCiAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgICAgICAgICAgICAgX2l0ZXJhdG9yMy5lKGVycik7CiAgICAgICAgICAgICAgICB9IGZpbmFsbHkgewogICAgICAgICAgICAgICAgICBfaXRlcmF0b3IzLmYoKTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICB2b3Rlc1N1bSA9IHZvdGVzQXJyYXkucmVkdWNlKGZ1bmN0aW9uIChhLCBiKSB7CiAgICAgICAgICAgICAgICAgIHJldHVybiBhICsgYjsKICAgICAgICAgICAgICAgIH0sIDApOwogICAgICAgICAgICAgICAgYW5zd2Vyc051bWJlciA9IGFuc3dlcnMubGVuZ3RoOwogICAgICAgICAgICAgICAgX2l0ZXJhdG9yNCA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKHVzZXJzKTsKCiAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICBmb3IgKF9pdGVyYXRvcjQucygpOyAhKF9zdGVwNCA9IF9pdGVyYXRvcjQubigpKS5kb25lOykgewogICAgICAgICAgICAgICAgICAgIHVzZXIgPSBfc3RlcDQudmFsdWU7CgogICAgICAgICAgICAgICAgICAgIGlmICh1c2VyLnVzZXJfaWQgPT09IHF1ZXN0aW9uLlVzZXJVc2VySWQpIHsKICAgICAgICAgICAgICAgICAgICAgIHF1ZXN0aW9uT2JqZWN0ID0gewogICAgICAgICAgICAgICAgICAgICAgICBhbnN3ZXJzOiBhbnN3ZXJzTnVtYmVyLAogICAgICAgICAgICAgICAgICAgICAgICB2b3Rlczogdm90ZXNTdW0sCiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBxdWVzdGlvbi50aXRsZSwKICAgICAgICAgICAgICAgICAgICAgICAgdXNlcjogdXNlci51c2VybmFtZSwKICAgICAgICAgICAgICAgICAgICAgICAgcXVlc3Rpb25faWQ6IHF1ZXN0aW9uLnF1ZXN0aW9uX2lkCiAgICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgICAgcXVlc3Rpb25zQXJyYXkucHVzaChxdWVzdGlvbk9iamVjdCk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgICAgICAgICAgICAgX2l0ZXJhdG9yNC5lKGVycik7CiAgICAgICAgICAgICAgICB9IGZpbmFsbHkgewogICAgICAgICAgICAgICAgICBfaXRlcmF0b3I0LmYoKTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgY2FzZSAyNjoKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA5OwogICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgIGNhc2UgMjg6CiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMzM7CiAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgY2FzZSAzMDoKICAgICAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSAzMDsKICAgICAgICAgICAgICAgIF9jb250ZXh0LnQwID0gX2NvbnRleHRbImNhdGNoIl0oNyk7CgogICAgICAgICAgICAgICAgX2l0ZXJhdG9yLmUoX2NvbnRleHQudDApOwoKICAgICAgICAgICAgICBjYXNlIDMzOgogICAgICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDMzOwoKICAgICAgICAgICAgICAgIF9pdGVyYXRvci5mKCk7CgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmZpbmlzaCgzMyk7CgogICAgICAgICAgICAgIGNhc2UgMzY6CiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhxdWVzdGlvbnNBcnJheSwgInRoaXMuIHF1ZXN0aW9uc0FycmF5Iik7CiAgICAgICAgICAgICAgICBfdGhpcy5xdWVzdGlvbnMgPSBxdWVzdGlvbnNBcnJheTsKICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKF90aGlzLnF1ZXN0aW9ucywgInRoaXMuIHF1ZXN0aW9ucyIpOwoKICAgICAgICAgICAgICBjYXNlIDM5OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZSwgbnVsbCwgW1s3LCAzMCwgMzMsIDM2XV0pOwogICAgICB9KSkoKTsKICAgIH0sCiAgICBnZXRVc2VyczogZnVuY3Rpb24gZ2V0VXNlcnModmFsdWUpIHsKICAgICAgY29uc29sZS5sb2codmFsdWUsICJ0aGVzZSBhcmUgdGhlIHVzZXJzIik7CiAgICB9CiAgfSwKICBtZXRob2RzOiB7CiAgICBoYW5kbGVDbGljazogZnVuY3Rpb24gaGFuZGxlQ2xpY2sodmFsdWUpIHsKICAgICAgdmFyIF90aGlzMiA9IHRoaXM7CgogICAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMigpIHsKICAgICAgICB2YXIgcXVlc3Rpb25JZCwgcXVlc3Rpb25EYXRhOwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMiQoX2NvbnRleHQyKSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Mi5wcmV2ID0gX2NvbnRleHQyLm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICAvLyByb3V0ZXIucHVzaCgnL3F1ZXN0aW9uJykKICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHZhbHVlLCAidGhlIHZhbHVlIik7CiAgICAgICAgICAgICAgICBxdWVzdGlvbklkID0gdmFsdWUucXVlc3Rpb25faWQ7CgogICAgICAgICAgICAgICAgX3RoaXMyLiRyb3V0ZXIucHVzaCgnL3F1ZXN0aW9uJyk7CgogICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSA1OwogICAgICAgICAgICAgICAgcmV0dXJuIGdldFF1ZXN0aW9uKHF1ZXN0aW9uSWQpOwoKICAgICAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgICAgICBxdWVzdGlvbkRhdGEgPSBfY29udGV4dDIuc2VudDsKICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHF1ZXN0aW9uRGF0YSwgInRoZSByb3cgZGF0YSIpOwoKICAgICAgICAgICAgICAgIF90aGlzMi4kc3RvcmUuY29tbWl0KCJzZXRRdWVzdGlvbkRhdGEiLCBxdWVzdGlvbkRhdGEpOwoKICAgICAgICAgICAgICBjYXNlIDg6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTIpOwogICAgICB9KSkoKTsKICAgIH0sCiAgICBnZXRVc2Vyc05hbWVzOiBmdW5jdGlvbiBnZXRVc2Vyc05hbWVzKCkgewogICAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMygpIHsKICAgICAgICB2YXIgdXNlcnM7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUzJChfY29udGV4dDMpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQzLnByZXYgPSBfY29udGV4dDMubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gMjsKICAgICAgICAgICAgICAgIHJldHVybiBnZXRVc2VycygpOwoKICAgICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgICB1c2VycyA9IF9jb250ZXh0My5zZW50OwoKICAgICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDMuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTMpOwogICAgICB9KSkoKTsKICAgIH0sCiAgICByZW1vdmVPYmplY3Q6IGZ1bmN0aW9uIHJlbW92ZU9iamVjdCh2YWx1ZSkgewogICAgICB2YXIgX3RoaXMzID0gdGhpczsKCiAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU0KCkgewogICAgICAgIHZhciBhbnN3ZXJzLCBfaXRlcmF0b3I1LCBfc3RlcDUsIGFuc3dlciwgZGVsZXRlQW5zd2VyT2JqZWN0LCBkZWxldGVRdWVzdGlvbk9iamVjdDsKCiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU0JChfY29udGV4dDQpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQ0LnByZXYgPSBfY29udGV4dDQubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHZhbHVlLCAidGhlIHZhbHVlIG9mIHJlbW92ZSBvYmplY3QiKTsgLy93aGVuIGRlbGV0ZSBxdWVzdGlvbiBkZWxldGUgYWxsIGl0cyBhbnN3ZXJzCgogICAgICAgICAgICAgICAgYW5zd2VycyA9IF90aGlzMy5nZXRRdWVzdGlvbkRhdGEuYW5zd2VyczsKCiAgICAgICAgICAgICAgICBpZiAoIShhbnN3ZXJzLmxlbmd0aCAhPT0gMCkpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQ0Lm5leHQgPSAyMTsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgX2l0ZXJhdG9yNSA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKF90aGlzMy5nZXRRdWVzdGlvbkRhdGEuYW5zd2Vycyk7CiAgICAgICAgICAgICAgICBfY29udGV4dDQucHJldiA9IDQ7CgogICAgICAgICAgICAgICAgX2l0ZXJhdG9yNS5zKCk7CgogICAgICAgICAgICAgIGNhc2UgNjoKICAgICAgICAgICAgICAgIGlmICgoX3N0ZXA1ID0gX2l0ZXJhdG9yNS5uKCkpLmRvbmUpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQ0Lm5leHQgPSAxMzsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgYW5zd2VyID0gX3N0ZXA1LnZhbHVlOwogICAgICAgICAgICAgICAgX2NvbnRleHQ0Lm5leHQgPSAxMDsKICAgICAgICAgICAgICAgIHJldHVybiBkZWxldGVBbnN3ZXIoYW5zd2VyLmFuc3dlcl9pZCk7CgogICAgICAgICAgICAgIGNhc2UgMTA6CiAgICAgICAgICAgICAgICBkZWxldGVBbnN3ZXJPYmplY3QgPSBfY29udGV4dDQuc2VudDsKCiAgICAgICAgICAgICAgY2FzZSAxMToKICAgICAgICAgICAgICAgIF9jb250ZXh0NC5uZXh0ID0gNjsKICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICBjYXNlIDEzOgogICAgICAgICAgICAgICAgX2NvbnRleHQ0Lm5leHQgPSAxODsKICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICBjYXNlIDE1OgogICAgICAgICAgICAgICAgX2NvbnRleHQ0LnByZXYgPSAxNTsKICAgICAgICAgICAgICAgIF9jb250ZXh0NC50MCA9IF9jb250ZXh0NFsiY2F0Y2giXSg0KTsKCiAgICAgICAgICAgICAgICBfaXRlcmF0b3I1LmUoX2NvbnRleHQ0LnQwKTsKCiAgICAgICAgICAgICAgY2FzZSAxODoKICAgICAgICAgICAgICAgIF9jb250ZXh0NC5wcmV2ID0gMTg7CgogICAgICAgICAgICAgICAgX2l0ZXJhdG9yNS5mKCk7CgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NC5maW5pc2goMTgpOwoKICAgICAgICAgICAgICBjYXNlIDIxOgogICAgICAgICAgICAgICAgX2NvbnRleHQ0Lm5leHQgPSAyMzsKICAgICAgICAgICAgICAgIHJldHVybiBkZWxldGVRdWVzdGlvbih2YWx1ZS5xdWVzdGlvbl9pZCk7CgogICAgICAgICAgICAgIGNhc2UgMjM6CiAgICAgICAgICAgICAgICBkZWxldGVRdWVzdGlvbk9iamVjdCA9IF9jb250ZXh0NC5zZW50OwoKICAgICAgICAgICAgICAgIC8vCiAgICAgICAgICAgICAgICBfdGhpczMuJHJvdXRlci5nbygwKTsgLy8gdGhpcy4kcm91dGVyLnB1c2goJy8nKS5jYXRjaCgoZXJyOiBhbnkpID0+IHsKICAgICAgICAgICAgICAgIC8vICAgICBjb25zb2xlLndhcm4oJ2Vycm9yIGluIGRlbGV0aW9uIG9mIHF1ZXN0aW9uLCB0aGUgZXJyb3I6JywgZXJyKQogICAgICAgICAgICAgICAgLy8gfSk7CgoKICAgICAgICAgICAgICBjYXNlIDI1OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ0LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWU0LCBudWxsLCBbWzQsIDE1LCAxOCwgMjFdXSk7CiAgICAgIH0pKSgpOwogICAgfSwKICAgIGZvcmNlVXBkYXRlMjogZnVuY3Rpb24gZm9yY2VVcGRhdGUyKCkgewogICAgICB0aGlzLmZ1Q29udGVudCA9ICF0aGlzLmZ1Q29udGVudDsKICAgIH0sCiAgICBzZXNzaW9uQ2hlY2s6IGZ1bmN0aW9uIHNlc3Npb25DaGVjaygpIHsKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTYoKSB7CiAgICAgICAgdmFyIHJlc3BvbnNlOwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlNiQoX2NvbnRleHQ2KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Ni5wcmV2ID0gX2NvbnRleHQ2Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBfY29udGV4dDYubmV4dCA9IDI7CiAgICAgICAgICAgICAgICByZXR1cm4ga3kucG9zdCgiaHR0cDovL2xvY2FsaG9zdDozMDAwL3Nlc3Npb25DaGVjayIsIHsKICAgICAgICAgICAgICAgICAgbW9kZTogImNvcnMiLAogICAgICAgICAgICAgICAgICBoZWFkZXJzOiB7CiAgICAgICAgICAgICAgICAgICAgImNvbnRlbnQtdHlwZSI6ICJhcHBsaWNhdGlvbi9qc29uIgogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICB0aW1lb3V0OiBmYWxzZQogICAgICAgICAgICAgICAgfSkudGhlbiggLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgdmFyIF9yZWYgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU1KHZhbHVlKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU1JChfY29udGV4dDUpIHsKICAgICAgICAgICAgICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQ1LnByZXYgPSBfY29udGV4dDUubmV4dCkgewogICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZXh0NS50MCA9IGNvbnNvbGU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dDUubmV4dCA9IDM7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWUudGV4dCgpOwoKICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dDUudDEgPSBfY29udGV4dDUuc2VudDsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dDUudDAubG9nLmNhbGwoX2NvbnRleHQ1LnQwLCAidGhpcyBpcyB0aGUgdmFsdWUgb2Ygc2Vzc2lvbiBjaGVjazoiLCBfY29udGV4dDUudDEpOwoKICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDUuc3RvcCgpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSwgX2NhbGxlZTUpOwogICAgICAgICAgICAgICAgICB9KSk7CgogICAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKF94KSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9yZWYuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIH0oKSk7CgogICAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gX2NvbnRleHQ2LnNlbnQ7CgogICAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Ni5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlNik7CiAgICAgIH0pKSgpOwogICAgfQogIH0sCiAgbW91bnRlZDogZnVuY3Rpb24gbW91bnRlZCgpIHsKICAgIHZhciBfdGhpczQgPSB0aGlzOwoKICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU3KCkgewogICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTckKF9jb250ZXh0NykgewogICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Ny5wcmV2ID0gX2NvbnRleHQ3Lm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIF9jb250ZXh0Ny5uZXh0ID0gMjsKICAgICAgICAgICAgICByZXR1cm4gZ2V0UXVlc3Rpb25zKCk7CgogICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgX3RoaXM0LmdldFF1ZXN0aW9uczsKICAgICAgICAgICAgICBfdGhpczQuZ2V0VXNlcnM7CiAgICAgICAgICAgICAgY29uc29sZS5sb2coX3RoaXM0LmdldFVzZXJzLCAiVEhFIFVTRVJTIik7CgogICAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Ny5zdG9wKCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LCBfY2FsbGVlNyk7CiAgICB9KSkoKTsKICB9Cn0pOw=="},{"version":3,"sources":["D:\\master_projects\\Mathoverflow_master\\Mathoverflow-v2\\mathoverflow-v2-client\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!D:\\master_projects\\Mathoverflow_master\\Mathoverflow-v2\\mathoverflow-v2-client\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\master_projects\\Mathoverflow_master\\Mathoverflow-v2\\mathoverflow-v2-client\\src\\components\\questions.vue?vue&type=script&lang=ts&"],"names":[],"mappings":"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","sourcesContent":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\r\nimport router from '@/router';\r\nimport store from '@/store';\r\nimport ky from 'ky';\r\nimport Vue from 'vue'\r\nimport { mapGetters } from 'vuex';\r\nimport { deleteAnswer, deleteQuestion, getQuestion, getQuestions, getUsers } from './functions'\r\nexport default Vue.extend({\r\n    data: () => ({\r\n        admin: true,\r\n        search: \"\",\r\n        questionsCols: [{ text: \"Answers\", align: 'start', sortable: true, value: 'answers' },\r\n        { text: \"Votes\", align: 'start', sortable: true, value: 'votes' },\r\n        { text: \"Question\", align: 'start', sortable: true, value: 'title' },\r\n        {\r\n            text: 'User',\r\n            align: 'start',\r\n            sortable: true,\r\n            value: 'user'\r\n        },\r\n        { text: \"id\", align: 'd-none', sortable: false, value: 'question_id' },\r\n        { text: \"\", align: 'center', sortable: false, value: 'remove' }\r\n        ],\r\n        questions: [\r\n            // { answers: \"13\", votes: \"50\", question: \"What's an intuitive way to think about the determinant?\", user: \"Ioanna96\" },\r\n            // { answers: \"5\", votes: \"28\", question: \"Why is a ring that has only one prime helpful?\", user: \"Tolis90\" },\\\r\n        ] as any[],\r\n        fuContent: false\r\n    }),\r\n    computed: {\r\n        ...mapGetters([\"getQuestions\", \"getUsers\", \"getQuestionData\"]),\r\n\r\n        // async questionsItems() {\r\n        //     let questions = [] as any[];\r\n        //     // console.log(value, \"value of get questions\");\r\n        //     for (const question of this.getQuestions) {\r\n        //         const questionData = await getQuestion(question.question_id);\r\n        //         const answers = questionData.answers;\r\n        //         const answersNumber = answers.length;\r\n        //         const questionObject = { answers: answersNumber, votes: \"10\", title: question.title, user: \"Ioanna\", question_id:question.question_id };\r\n        //         questions.push(questionObject);\r\n        //         console.log(questions, \"these are questions\")\r\n        //     }\r\n        //     return questions;\r\n        // },\r\n        computedHeaders() {\r\n            return this.questionsCols.filter(word => word.value !== \"question_id\")\r\n        }\r\n    },\r\n    watch: {\r\n        async getQuestions(value: any) {\r\n            let questionsArray = [] as any[];\r\n            let answers = [] as any[];\r\n            console.log(value, \"value of get questions\");\r\n            const users = await getUsers();\r\n            for (const question of value) {\r\n                const questionData = await getQuestion(question.question_id);\r\n                console.log(questionData, \"THE QUESTION DATA\")\r\n                for (const answer of questionData.answers) {\r\n                    if (answer.UserUserId !== null) {\r\n                        answers.push(answer)\r\n                    }\r\n                }\r\n                console.log(answers, \"the answers222\")\r\n                // const answers = questionData.answers;\r\n                const votes = questionData.votes;\r\n                const votesArray: any[] = []\r\n                //calculate votes\r\n                for (const vote of votes) {\r\n                    const value = vote.value\r\n                    votesArray.push(value)\r\n                }\r\n                //get the sum\r\n                const votesSum = votesArray.reduce((a, b) => a + b, 0)\r\n                const answersNumber = answers.length;\r\n                for (const user of users) {\r\n                    if (user.user_id === question.UserUserId) {\r\n                        const questionObject = { answers: answersNumber, votes: votesSum, title: question.title, user: user.username, question_id: question.question_id };\r\n                        questionsArray.push(questionObject);\r\n                    }\r\n                }\r\n            }\r\n            console.log(questionsArray, \"this. questionsArray\")\r\n            this.questions = questionsArray;\r\n            console.log(this.questions, \"this. questions\")\r\n        },\r\n        getUsers(value: any) {\r\n            console.log(value, \"these are the users\");\r\n\r\n        }\r\n    },\r\n\r\n\r\n    methods: {\r\n        async handleClick(value: any) {\r\n            // router.push('/question')\r\n            console.log(value, \"the value\");\r\n            const questionId = value.question_id;\r\n            this.$router.push('/question');\r\n            const questionData = await getQuestion(questionId);\r\n            console.log(questionData, \"the row data\");\r\n            this.$store.commit(\"setQuestionData\", questionData)\r\n        },\r\n        async getUsersNames() {\r\n            const users = await getUsers();\r\n        },\r\n        async removeObject(value: any) {\r\n            console.log(value, \"the value of remove object\")\r\n            //when delete question delete all its answers\r\n            const answers = this.getQuestionData.answers\r\n            if (answers.length !== 0) {\r\n                for (const answer of this.getQuestionData.answers) {\r\n                    const deleteAnswerObject = await deleteAnswer(answer.answer_id);\r\n                }\r\n            }\r\n            const deleteQuestionObject = await deleteQuestion(value.question_id);\r\n            //\r\n            this.$router.go(0);\r\n            // this.$router.push('/').catch((err: any) => {\r\n            //     console.warn('error in deletion of question, the error:', err)\r\n            // });\r\n        },\r\n        forceUpdate2() {\r\n            this.fuContent = !this.fuContent;\r\n        },\r\n        async sessionCheck() {\r\n            let response = await ky\r\n                .post(\"http://localhost:3000/sessionCheck\", {\r\n                    mode: \"cors\",\r\n                    headers: {\r\n                        \"content-type\": \"application/json\",\r\n                    },\r\n                    timeout: false,\r\n                })\r\n                .then(async (value: any) => {\r\n                    console.log(\"this is the value of session check:\", await value.text());\r\n                });\r\n        }\r\n    },\r\n    async mounted() {\r\n        await getQuestions();\r\n        this.getQuestions;\r\n        this.getUsers;\r\n        console.log(this.getUsers, \"THE USERS\")\r\n    }\r\n})\r\n"],"sourceRoot":""}]}