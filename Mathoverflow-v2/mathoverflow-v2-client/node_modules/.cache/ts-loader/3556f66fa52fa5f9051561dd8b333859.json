{"remainingRequest":"D:\\master_projects\\Mathoverflow_master\\Mathoverflow-v2\\mathoverflow-v2-client\\node_modules\\babel-loader\\lib\\index.js!D:\\master_projects\\Mathoverflow_master\\Mathoverflow-v2\\mathoverflow-v2-client\\node_modules\\ts-loader\\index.js??ref--14-2!D:\\master_projects\\Mathoverflow_master\\Mathoverflow-v2\\mathoverflow-v2-client\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!D:\\master_projects\\Mathoverflow_master\\Mathoverflow-v2\\mathoverflow-v2-client\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\master_projects\\Mathoverflow_master\\Mathoverflow-v2\\mathoverflow-v2-client\\src\\components\\unanswered_questions.vue?vue&type=script&lang=ts&","dependencies":[{"path":"D:\\master_projects\\Mathoverflow_master\\Mathoverflow-v2\\mathoverflow-v2-client\\src\\components\\unanswered_questions.vue","mtime":1665858878906},{"path":"D:\\master_projects\\Mathoverflow_master\\Mathoverflow-v2\\mathoverflow-v2-client\\babel.config.js","mtime":1665858878853},{"path":"D:\\master_projects\\Mathoverflow_master\\Mathoverflow-v2\\mathoverflow-v2-client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\master_projects\\Mathoverflow_master\\Mathoverflow-v2\\mathoverflow-v2-client\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"D:\\master_projects\\Mathoverflow_master\\Mathoverflow-v2\\mathoverflow-v2-client\\node_modules\\ts-loader\\index.js","mtime":499162500000},{"path":"D:\\master_projects\\Mathoverflow_master\\Mathoverflow-v2\\mathoverflow-v2-client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\master_projects\\Mathoverflow_master\\Mathoverflow-v2\\mathoverflow-v2-client\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["D:\\master_projects\\Mathoverflow_master\\Mathoverflow-v2\\mathoverflow-v2-client\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!D:\\master_projects\\Mathoverflow_master\\Mathoverflow-v2\\mathoverflow-v2-client\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\master_projects\\Mathoverflow_master\\Mathoverflow-v2\\mathoverflow-v2-client\\src\\components\\unanswered_questions.vue?vue&type=script&lang=ts&"],"names":[],"mappings":"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","sourcesContent":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\r\nimport router from '@/router';\r\nimport store from '@/store';\r\nimport Vue from 'vue'\r\nimport { mapGetters } from 'vuex';\r\nimport { getQuestion, getQuestions, getUsers } from './functions'\r\nexport default Vue.extend({\r\n    data: () => ({\r\n        admin: true,\r\n        search: \"\",\r\n        questionsCols: [{ text: \"Answers\", align: 'start', sortable: true, value: 'answers' }, { text: \"Votes\", align: 'start', sortable: true, value: 'votes' }, { text: \"Question\", align: 'start', sortable: true, value: 'title' }, {\r\n            text: 'User',\r\n            align: 'start',\r\n            sortable: true,\r\n            value: 'user'\r\n        }, { text: \"id\", align: 'd-none', sortable: false, value: 'question_id' }, { text: \"\", align: 'center', sortable: false, value: 'remove' }],\r\n        questions: [] as any[],\r\n    }),\r\n    computed: {\r\n        ...mapGetters([\"getQuestions\", \"getUsers\"]),\r\n\r\n        // async questionsItems() {\r\n        //     let questions = [] as any[];\r\n        //     // console.log(value, \"value of get questions\");\r\n        //     for (const question of this.getQuestions) {\r\n        //         const questionData = await getQuestion(question.question_id);\r\n        //         const answers = questionData.answers;\r\n        //         const answersNumber = answers.length;\r\n        //         const questionObject = { answers: answersNumber, votes: \"10\", title: question.title, user: \"Ioanna\", question_id:question.question_id };\r\n        //         questions.push(questionObject);\r\n        //         console.log(questions, \"these are questions\")\r\n        //     }\r\n        //     return questions;\r\n        // },\r\n        computedHeaders() {\r\n            return this.questionsCols.filter(word => word.value !== \"question_id\")\r\n        }\r\n    },\r\n    watch: {\r\n        async getQuestions(value: any) {\r\n            let unansweredQuestionsArray = [] as any[];\r\n            console.log(value, \"value of get questions\");\r\n            const users = await getUsers();\r\n            for (const question of value) {\r\n                const questionData = await getQuestion(question.question_id);\r\n                const answers = questionData.answers;\r\n                const answersNumber = answers.length;\r\n                if (answersNumber === 0) {\r\n                    // for (const user of users) {\r\n                    //     if (user.user_id === question.UserUserId) {\r\n\r\n                    //         const questionObject = { answers: answersNumber, votes: \"12\", title: question.title, user: user.username, question_id: question.question_id };\r\n                    //         unansweredQuestionsArray.push(questionObject);\r\n                    //     }\r\n                    // }\r\n                    const votes = questionData.votes;\r\n                    const votesArray: any[] = []\r\n                    //calculate votes\r\n                    for (const vote of votes) {\r\n                        const value = vote.value\r\n                        votesArray.push(value)\r\n                    }\r\n                    //get the sum\r\n                    const votesSum = votesArray.reduce((a, b) => a + b, 0)\r\n                    const answersNumber = answers.length;\r\n                    for (const user of users) {\r\n                        if (user.user_id === question.UserUserId) {\r\n\r\n                            const questionObject = { answers: answersNumber, votes: votesSum, title: question.title, user: user.username, question_id: question.question_id };\r\n                            unansweredQuestionsArray.push(questionObject);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            console.log(unansweredQuestionsArray, \"this. questionsArray\")\r\n            this.questions = unansweredQuestionsArray;\r\n            console.log(this.questions, \"this. questions\")\r\n        },\r\n        getUsers(value: any) {\r\n            console.log(value, \"these are the users\");\r\n\r\n        }\r\n    },\r\n\r\n    methods: {\r\n        async handleClick(value: any) {\r\n            // router.push('/question')\r\n            console.log(value, \"the value\");\r\n            const questionId = value.question_id;\r\n            this.$router.push('/question');\r\n            const questionData = await getQuestion(questionId);\r\n            console.log(questionData, \"the row data\");\r\n            store.commit(\"setQuestionData\", questionData)\r\n        },\r\n        async getUsersNames() {\r\n            const users = await getUsers();\r\n        }\r\n    },\r\n    async mounted() {\r\n        getQuestions();\r\n        this.getQuestions;\r\n        this.getUsers;\r\n        console.log(this.getUsers, \"THE USERS\")\r\n    }\r\n})\r\n"],"sourceRoot":""}]}